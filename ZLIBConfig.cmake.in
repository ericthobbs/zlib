@PACKAGE_INIT@

set(ZLIB_INCLUDE_DIR @PACKAGE_CMAKE_INSTALL_INCLUDEDIR@)
set(ZLIB_VERSION_MAJOR "@ZLIB_VERSION_MAJOR@")
set(ZLIB_VERSION_MINOR "@ZLIB_VERSION_MINOR@")
set(ZLIB_VERSION_PATCH "@ZLIB_VERSION_PATCH@")
set(ZLIB_VERSION_TWEAK "@ZLIB_VERSION_TWEAK@")
set(ZLIB_VERSION_STRING "@ZLIB_VERSION_STRING@")

include("${CMAKE_CURRENT_LIST_DIR}/ZLIBTargets.cmake")

### Get the preferred zlib target ###
if(NOT TARGET ZLIB::zlibstatic OR NOT ZLIB_PREFER_STATIC_LIBRARY)
	set(_ZLIB_TARGET ZLIB::zlib)
else()
	set(_ZLIB_TARGET ZLIB::zlibstatic)
endif()

### This macro will emulate the "find_library" call in FindZLIB.cmake ###
macro(_ZLIB_GET_IMPORTED_LIBRARIES)
	get_target_property(_ZLIB_IMPORTED_CONFIGS ${_ZLIB_TARGET} IMPORTED_CONFIGURATIONS)
	foreach(_ZLIB_IMPORTED_CONFIG IN LISTS _ZLIB_IMPORTED_CONFIGS)
		get_target_property(ZLIB_LIBRARY_${_ZLIB_IMPORTED_CONFIG} ${_ZLIB_TARGET} IMPORTED_LOCATION_${_ZLIB_IMPORTED_CONFIG})
	endforeach()
	unset(_ZLIB_IMPORTED_CONFIG)
	unset(_ZLIB_IMPORTED_CONFIGS)

	include(SelectLibraryConfigurations)
	select_library_configurations(ZLIB)
endmacro()

_ZLIB_GET_IMPORTED_LIBRARIES()

include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB REQUIRED_VARS ZLIB_LIBRARY ZLIB_INCLUDE_DIR
                                       VERSION_VAR ZLIB_VERSION_STRING)

if(ZLIB_FOUND)
	add_library(ZLIB::ZLIB ALIAS ${_ZLIB_TARGET})
	set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})

	if(NOT ZLIB_LIBRARIES)
		set(ZLIB_LIBRARIES ${ZLIB_LIBRARY})
	endif()
endif()
unset(_ZLIB_TARGET)
